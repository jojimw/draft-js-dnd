{"version":3,"sources":["utils/draft-js-utils/customBlockRenderMap.js","components/CustomBlocks.js","utils/draft-js-utils/customBlockRenderer.js","utils/draft-js-helpers/helpers.js","utils/draft-js-helpers/heightCalc.js","components/Editor.js","utils/draft-js-helpers/dragAndDrop.js","App.js","index.js"],"names":["customBlockRenderMap","Immutable","Map","custom-block-h3","element","extendedBlockRenderMap","Draft","DefaultDraftBlockRenderMap","merge","sampleBlock","data","this","props","block","getData","react_default","a","createElement","data-offset-key","className","data-text","get","React","Component","sampleBlockRenderer","contentBlock","getType","component","editable","getNextEditorState","editorState","contentBlockArray","selection","contentState","getCurrentContent","getSelection","nextEditorState","EditorState","createEmpty","fragment","BlockMapBuilder","createFromArray","isCollapsed","nextContentState","Modifier","replaceWithFragment","push","getContentBlockArray","dataArray","map","blockData","ContentBlock","Object","objectSpread","key","genKey","getBlockArray","type","terms","termsConditions","blocks","heightCalc","document","getElementsByClassName","offsetHeight","MyEditor","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onStyleButtonClick","e","onChange","RichUtils","toggleInlineStyle","state","target","name","insertContent","arguments","length","undefined","handleDrop","dataTransfer","isInternal","setState","handleKeyCommand","bind","assertThisInitialized","command","newState","_this2","buttons","style","onClick","Fragment","console","log","convertToRaw","input","prompt","text","inputFromUser","draggable","id","onDragStart","event","setData","classList","add","onDragEnd","remove","ref","blockRendererFn","blockRenderMap","placeholder","App","Editor","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.55a539c4.chunk.js","sourcesContent":["import Draft from \"draft-js\";\nimport Immutable from \"immutable\";\n\nconst customBlockRenderMap = Immutable.Map({\n    'custom-block-h3': {\n        element: 'h3'\n    }\n  });\n\nexport const extendedBlockRenderMap = Draft.DefaultDraftBlockRenderMap.merge(customBlockRenderMap);","import React from \"react\";\n\nclass sampleBlock extends React.Component {\n    render() {\n        const {\n            block,\n            // contentState\n        } = this.props;\n        const data = block.getData();\n        return (\n            //   <div style={{paddingTop: '50px', paddingBottom: '8px'}}>\n            <div data-offset-key=\"0tys1-0-0\" className=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n                <span data-offset-key=\"0tys1-0-0\">\n                    <span data-text=\"true\">{data.get(\"some\")}</span>\n                </span>\n            </div>\n        )\n    }\n}\n\nexport {\n    sampleBlock\n} ","import { sampleBlock } from \"../../components/CustomBlocks\";\n\nexport const sampleBlockRenderer = (contentBlock) => {\n    const type = contentBlock.getType();\n    if (type === 'custom') {\n        return {\n            component: sampleBlock,\n            editable: true\n        };\n    }\n}","import {\n    EditorState,\n    convertToRaw,\n    Modifier,\n    BlockMapBuilder,\n    genKey,\n    ContentBlock,\n} from 'draft-js';\nimport { Map } from \"immutable\";\n\nimport termsConditions from \"../../templates/terms2.json\";\n\nexport const getNextEditorState = (editorState, contentBlockArray, selection) => {\n    const contentState = editorState.getCurrentContent();\n\n    selection = selection || editorState.getSelection();\n\n    let nextEditorState = EditorState.createEmpty();\n    const fragment = BlockMapBuilder.createFromArray(contentBlockArray);\n    // const testState = ContentState.createFromBlockArray(contentBlockArray).blockMap;\n\n    if (selection.isCollapsed()) {\n        const nextContentState = Modifier.replaceWithFragment(contentState, selection, fragment);\n        nextEditorState = EditorState.push(\n            editorState,\n            nextContentState,\n            'insert-fragment'\n        );\n    }\n    return nextEditorState;\n}\n\nexport const logState = editorState => {\n    console.log( convertToRaw( editorState.getCurrentContent() ) );\n}\n\nexport const getContentBlockArray = (dataArray) => {\n    return dataArray.map(blockData => new ContentBlock(\n        {\n            ...blockData,\n            key: genKey(),\n            data: new Map({})\n        })\n    );\n}\n\nexport const inputFromUser = () => {\n    const input = prompt();\n    return [\n        new ContentBlock({\n            text: input,\n            key: genKey(),\n            data: new Map({})\n        })\n    ];\n}\n\nexport const getBlockArray = type => {\n    const blockArray = {\n        terms: termsConditions.blocks\n    };\n    return blockArray[type];\n}","export const heightCalc = () => {\n    const element = document.getElementsByClassName(\"DraftEditor-editorContainer\")[0];\n    if (element && element.offsetHeight >= 40) {\n        // console.log(`offset height = ${element.offsetHeight}px`);\n        // console.log(`client height = ${element.clientHeight}px`);\n    }\n}","import React from 'react';\nimport {\n    Editor,\n    EditorState,\n    RichUtils,\n} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\n\n// import initContent from \"../templates/initContent.json\";\n// import termsConditions from \"./../templates/terms2.json\";\n\nimport {\n    sampleBlockRenderer,\n    extendedBlockRenderMap\n} from \"../utils/draft-js-utils\";\n\nimport {\n    handleDragStart,\n    handleDragEnd,\n    getNextEditorState,\n    logState,\n    getContentBlockArray,\n    getBlockArray,\n    inputFromUser,\n    heightCalc\n} from \"../utils/draft-js-helpers\";\n\nclass MyEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editorState: EditorState.createEmpty()\n        };\n        this.onChange = (editorState) => {\n            this.setState({ editorState });\n            heightCalc();\n        }\n        this.handleKeyCommand = this.handleKeyCommand.bind(this);\n    }\n\n    handleKeyCommand(command, editorState) {\n        const newState = RichUtils.handleKeyCommand(editorState, command);\n        if (newState) {\n            this.onChange(newState);\n            return 'handled';\n        }\n        return 'not-handled';\n    }\n\n    onStyleButtonClick = (e) => {\n        this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, e.target.name));\n    }\n\n    insertContent = (contentBlockArray, selection = null) => {\n        const { editorState } = this.state;\n        const nextEditorState = getNextEditorState(editorState, contentBlockArray, selection);\n        this.onChange(nextEditorState);\n    }\n\n\n    handleDrop = (selection, dataTransfer, isInternal) => {\n        if (isInternal === \"external\") {\n            const type = dataTransfer.data.getData('text');\n            const contentBlockArray = getContentBlockArray(getBlockArray(type));\n            this.insertContent(contentBlockArray, selection);\n            return 'handled';\n        }\n    }\n\n    render() {\n        const styles = ['BOLD', 'ITALIC', 'UNDERLINE'];\n        const buttons = styles.map(style => {\n            return <button key={style} onClick={this.onStyleButtonClick} name={style}>{style}</button>\n        })\n        return (\n            <React.Fragment>\n                <h2>New Editor</h2>\n                <div className='toolbar'>\n                    {buttons}\n                    <button key='logger' onClick={() => logState(this.state.editorState)}>LOG STATE</button>\n                    <button key='text' onClick={() => this.insertContent(getContentBlockArray(getBlockArray('terms')))}>INSERT</button>\n                    <button key='input' onClick={() => this.insertContent(inputFromUser())}>INPUT</button>\n                </div>\n\n                <div\n                    className=\"terms\"\n                    draggable\n                    id=\"terms\"\n                    onDragStart={e => handleDragStart(e)}\n                    onDragEnd={e => handleDragEnd(e)}\n                >\n                    Terms\n                </div>\n\n                <Editor\n                    editorState={this.state.editorState}\n                    handleKeyCommand={this.handleKeyCommand}\n                    onChange={this.onChange}\n                    ref='editor'\n                    handleDrop={this.handleDrop}\n                    blockRendererFn={sampleBlockRenderer}\n                    blockRenderMap={extendedBlockRenderMap}\n                    placeholder='Start typing...'\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default MyEditor;","export const handleDragStart = event => {\n    event.dataTransfer.setData(\"text\", event.target.id);\n    event.target.classList.add('dragging')\n}\n\nexport const handleDragEnd = event => {\n    event.target.classList.remove('dragging');\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Editor from \"./components/Editor\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Editor />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}